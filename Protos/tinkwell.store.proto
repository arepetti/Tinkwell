syntax = "proto3";

option csharp_namespace = "Tinkwell.Services";

package Tinkwell;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

// Service definition for the Tinkwell Measures Registry.
// This service provides methods for registering, updating, querying, and subscribing to measures.
service Store {
    // Registers a new measure.
    rpc Register(StoreRegisterRequest) returns (google.protobuf.Empty);

    // Registers multiple measures in a single call.
    rpc RegisterMany(StoreRegisterManyRequest) returns (google.protobuf.Empty);

    // Updates the value of an existing measure.
    rpc Update(StoreUpdateRequest) returns (google.protobuf.Empty);

    // Updates the values of multiple existing measures in a single call.
    rpc UpdateMany(StoreUpdateManyRequest) returns (google.protobuf.Empty);

    // Sets the value of an existing measure from a string, handling type conversion automatically.
    rpc SetMeasureValue(SetMeasureValueRequest) returns (google.protobuf.Empty);

    // Finds a single measure by its unique name.
    rpc Find(StoreFindRequest) returns (StoreMeasure);

    // Finds all measures, optionally filtered by a list of names.
    // If the names list is empty, all measures are returned.
    rpc FindAll(StoreFindAllRequest) returns (stream StoreMeasure);

    // Finds all measure definitions, optionally filtered by a list of names.
    // If the names list is empty, all definitions are returned.
    rpc FindAllDefinitions(StoreFindAllDefinitionsRequest) returns (stream StoreDefinition);

    // Searches for measures matching the specified criteria.
    rpc Search(SearchRequest) returns (stream SearchResponse);

    // Read the current value of a set of measures.
    // It's lighter thand FindAll() but this function does NOT return a stream,
    // use only when you need the current value of a very small number of measures.
    rpc ReadMany(StoreReadManyRequest) returns (StoreValueList);

    // Subscribes to value changes for a single measure.
    rpc Subscribe(SubscribeRequest) returns (stream StoreValueChange);

    // Subscribes to value changes for a specific list of measures.
    rpc SubscribeMany(SubscribeManyRequest) returns (stream StoreValueChange);

    // Subscribes to value changes for all measures matching a name pattern.
    rpc SubscribeManyMatching(SubscribeManyMatchingRequest) returns (stream StoreValueChange);
}

// Represents the full state of a measure, including its definition, metadata, and current value.
message StoreMeasure {
    // The definition of the measure.
    StoreDefinition definition = 1;
    // The metadata associated with the measure.
    StoreMetadata metadata = 2;
    // The current value of the measure.
    StoreValue value = 3;
}

// Represents a set of measures with their value.
message StoreValueList {
    message Item {
        // The definition of the measure.
        string name = 1;
        // The current value of the measure.
        StoreValue value = 2;
    }
    repeated Item items = 1;
}

// Represents a measure without its value, for when only definition and metadata are needed.
message StoreMeasureInfo {
    // The definition of the measure.
    StoreDefinition definition = 1;
    // The metadata associated with the measure.
    StoreMetadata metadata = 2;
}

// Represents the definition of a measure, corresponding to the C# MeasureDefinition class.
message StoreDefinition {
    // Defines the type of a measure's value.
    enum Type {
        // The measure can hold any type of value.
        DYNAMIC = 0;
        // The measure holds a numeric value.
        NUMBER = 1;
        // The measure holds a string value.
        STRING = 2;
    }

    // Attributes of the measure.
    // This is a bitmask. For example, a value of 3 (binary 11) means Constant and Derived.
    //   None = 0: normal measure
    //   Constant = 1: constant value (cannot be changed after the first write)
    //   Derived = 2: derived measure (informative)
    //   SystemGenerated = 4: generated automatically by the system
    int32 attributes = 1;
    
    // The type of the measure's value.
    Type type = 2;
    // The unique name of the measure.
    string name = 3;
    // The type of the quantity (e.g., "Length", "Mass").
    optional string quantity_type = 4;
    // The unit of the measure (e.g., "Meter", "Kilogram").
    optional string unit = 5;
    // The time-to-live for the measure's value. After this duration, the value is considered expired.
    optional google.protobuf.Duration ttl = 6;
    // The minimum allowed value for a numeric measure.
    optional double minimum = 7;
    // The maximum allowed value for a numeric measure.
    optional double maximum = 8;
    // The number of decimal places to round a numeric value to.
    optional int32 precision = 9;
}

// Represents the metadata for a measure, returned by the service.
message StoreMetadata {
    // The timestamp when the measure was created.
    google.protobuf.Timestamp created_at = 1;
    // A list of tags associated with the measure for categorization and searching.
    repeated string tags = 2;
    // The category of the measure.
    optional string category = 3;
    // The description of the measure.
    optional string description = 4;
}

// Represents the metadata for a measure provided by the client on creation.
// This message omits fields that are managed by the service, like `created_at`.
message StoreMetadataInput {
    reserved 3;
    // A list of tags to associate with the measure.
    repeated string tags = 1;
    // The category to associate with the measure.
    optional string category = 2;
    // The description of the measure.
    optional string description = 4;
}

// Represents the value of a measure, corresponding to the C# MeasureValue struct.
message StoreValue {
    // The timestamp when the value was recorded.
    google.protobuf.Timestamp timestamp = 1;
    // The actual value, which can be either a number or a string.
    oneof payload {
        double number_value = 2;
        string string_value = 3;
    }
}

// Represents a notification for a measure value change.
message StoreValueChange {
    // The name of the measure that changed.
    string name = 1;
    // The new value of the measure.
    StoreValue new_value = 2;
    // The old value of the measure, if available.
    optional StoreValue old_value = 3;
}

// --- Request and Response Messages ---

// Request to register a new measure.
message StoreRegisterRequest {
    // The definition of the measure to register.
    StoreDefinition definition = 1;
    // The initial metadata for the measure.
    StoreMetadataInput metadata = 2;
}

// Request to register multiple measures.
message StoreRegisterManyRequest {
    // A list of measures to register.
    repeated StoreRegisterRequest items = 1;
}

// Request to update the value of a measure.
message StoreUpdateRequest {
    // The name of the measure to update.
    string name = 1;
    // The new value for the measure.
    StoreValue value = 2;
}

// Request to update the values of multiple measures.
message StoreUpdateManyRequest {
    // A list of measure updates.
    repeated StoreUpdateRequest items = 1;
}

// Request to set the value of a measure from a string.
message SetMeasureValueRequest {
    // The name of the measure to update.
    string name = 1;
    // The string representation of the value. The service will parse this based on the measure's type.
    string value_string = 2;
}

// Request to find a single measure.
message StoreFindRequest {
    // The name of the measure to find.
    string name = 1;
}

// Request to find all measures, with an optional filter by name.
message StoreFindAllRequest {
    // If empty, find all measures. Otherwise, find only the measures with the specified names.
    repeated string names = 1;
}

// Request to read the value of a set of measures.
message StoreReadManyRequest {
    // List of names of the measures to include in the response.
    repeated string names = 1;
}

// Request to find all measure definitions, with an optional filter by name.
message StoreFindAllDefinitionsRequest {
    // If empty, find all definitions. Otherwise, find only the definitions with the specified names.
    repeated string names = 1;
}

// Request to search for measures.
message SearchRequest {
    // A query string to match against the measure name. Search is case-insensitive.
    // Wildcards such as * and ? are supported.
    // For example "JournalBearing.Temperature.*" matches all the measures that start with "JournalBearing.Temperature."
    // and "JournalBearing.*.*Oil*" matches all the measures that start with "JournalBearing." and contain "Oil" in the
    // third part of the name." ? works as a single character wildcard, for example "JournalBearing.Temperature.Oil?"
    // matches all the measures that starts with the specified string and ends with any other single character.
    // If you want to search for all the measure that includes a specific word then use "*word*".
    // It suports groups as in "[Bb]lue", it matches both "Blue" and "blue". You can negate groups as
    // as in "[^Bb]lue", it matches "Glue" but not "blue" or "Blue". You can also specify ranges "[a-zA-Z]".
    optional string query = 1;
    // A list of tags to match against the measure's tags.
    repeated string tags = 2;
    // A category to match against the measure's category.
    optional string category = 3;
    // If true, the response will include the full StoreMeasure with values.
    // If false, the response will include only StoreMeasureInfo (definition and metadata).
    bool include_values = 4;
}

// Response from a search request.
message SearchResponse {
    // The result of the search, which can be either a full measure or just its info.
    oneof result {
        StoreMeasure measure = 1;
        StoreMeasureInfo info = 2;
    }
}

// Request to subscribe to a single measure.
message SubscribeRequest {
    // The name of the measure to subscribe to.
    string name = 1;
}

// Request to subscribe to multiple measures.
message SubscribeManyRequest {
    // The names of the measures to subscribe to.
    repeated string names = 1;
}

// Request to subscribe to measures matching a pattern.
message SubscribeManyMatchingRequest {
    // A pattern to match against measure names. Search is case-insensitive.
    // Wildcards such as * and ? are supported.
    // For example "JournalBearing.Temperature.*" matches all the measures that start with "JournalBearing.Temperature."
    // and "JournalBearing.*.*Oil*" matches all the measures that start with "JournalBearing." and contain "Oil" in the
    // third part of the name." ? works as a single character wildcard, for example "JournalBearing.Temperature.Oil?"
    // matches all the measures that starts with the specified string and ends with any other single character.
    // If you want to search for all the measure that includes a specific word then use "*word*".
    // It suports groups as in "[Bb]lue", it matches both "Blue" and "blue". You can negate groups as
    // as in "[^Bb]lue", it matches "Glue" but not "blue" or "Blue". You can also specify ranges "[a-zA-Z]".
    string pattern = 1;
}